THEORY:
Sunday Algorithm involves with BM Algorithm and improves to deal with bad characters.

Now, we are going to match t in s, there are two situations in the string matching(equal or not equal).
if s[i] is equal to t[j], we can move to the next simply, however, it happens to meet s[i]!=t[j] and we
call it the bad character. The latter is very complex for us so that we must stop going ahead for processing
it. First of all, it's necessary to whether s[i+1] is in t and we usually check for it from the length of t to
zero. if s[i+1] exist, we move i to i+j+2 and move j to 0, likes: i=i+j+2,j=0. if the index of s[i+1] is k, we
can alter i to i-k+1 and alter j to 0. The last, we must to calculate the result, likes index=j>=tl?i-j:-1.

PESUDOCODE:

CODE:

//Sunday Algorithm
int pm_sunday(char *s, char *t)
{
    int sl=strlen(s);
    int tl=strlen(t);
    
    if(sl<=0||tl<=0) return -1;
    
    int i=0,j=0;
    
    while(i<sl&&j<tl)
    {
        while(j<tl)
	{
	    if(s[i]==t[j])
	    {
	        ++i;
		++j;
	    }
	    else
	    {
	        if(i==sl-1)
		{
		    i=i+1;
		    break;
		}
			
		int k=tl-1;
			
		while(k>-1&&s[i+1]!=t[k]) --k;
			
		i=k<0?i+j+2:i-k+1;
		j=0;
	    }
	}
    }
    
    return j>=tl?i-j:-1;
}

IMPROVEMENT:

int pm_sunday(char *s, char *t)
{
	int sl = stotext_length(s);
	int tl = stotext_length(t);

	if (tl <= 0 || sl <= 0) return -1;

	int shift[256];
	int i = 0, j = 0, limit = sl - tl + 1;

	for (i = 0; i<256; ++i) shift[i] = tl + 1;
	for (i = 0; i<tl; ++i) shift[t[i]] = tl - i;

	for (i = 0; i<limit; i += shift[s[i + tl]])
	{
		if (s[i] == t[j])
		{
			char *p = s + i + 1;
			int k = 1;
			do
			{
				if (k == tl) return i;

			} while (*p++ == t[k++]);
		}
	}

	return -1;
}
